TODO

 - EXPÉRIMENTAL : L'utilisateur nobody n'a aucun droit
 (élément incomparable avec tt le monde).
 Je renvoie ça dans get_group_by_name quand le group n'existe pas,
 plutôt que NoSuchUser. Est-ce OK ?
 Est-ce qu'il faut renvoyer ça aussi ailleurs ?
 

 - IMPORTANT WARNING: the cache may cause inconsistencies of data
 if several processes are modifying the database
 - Cache or not to cache?
 What data is it necessary to cache??
 How to be sure that data are removed from the cache when they are modified?
 Wiki_sql.get_readers (set ... writers ... admins)
 are not cached for now!
 User_sql.find_user is not cached with ~name parameter for now.
 - Use userid instead of userdata wherever it is possible
 - Use Lwt.finalize for all commit db!!!!!!!!!!!!!!!!!!!!!!!!
 or piutosto Pgocaml.abort if it fails
 - I removed all that depends on module Services for now Vincent 2008/04/15
(dynamic creation of services)
 - pas clair la distinction entre forum et forum_sql, user et usr_sql,
 notamment pour l'abstraction des types forum, group, user...
 - uniformize labels (put labels everywhere, and always the same name for the
 same type)
 - Give up with ocamlduce? (for ex pb with empty <select> written <select />
 not displayed correctly by firefox ...)
 - Take care of exception (database ...) more carefully and write error messages
 - Faut tout revoir pour uniformiser. C'est vraiment le bordel.
 - Not really clear where to use objects or functors. 
 Do we need overriding and late binding?
 - Uniformize the place where permissions are checked.
 Is it in the widgets? In the db interface?
 - Put sp in sd to avoid passing both parameters everywhere?
 Warning: sd is transmitted by actions to subsequent services, but sp must not!
 - Pourquoi les constructeurs des types "role" de forum ont des valeurs ?
 - internationalisation
 - session data: the mechnanism is too complex, dangerous (we must think to 
 keep it up to date) and not really useful for now.
 Remove it completely and rely on global cache?


How to make sure that:
 - user information is taken only once, for example role in the wiki, 
 in the forum and only if needed (lazy?)? And even if it is after an action.
 - all widgets have a ?classe parameter?
 - all database errors are taken into account?
 Wrap all db result in a kind of exception monad?
 - admin has all rights (just put admin in all groups by default?
 of make the function in_group answer yes? or check if the user is admin
 evrywhere? or all together?)
 - all actions will send session-data to the following service?

Wiki:
 - What if two users modify the same page at the same time?
 - Revoir le changement des droits.
 En particulier il ne faut pas enegistrer une nouvelle version si l'on a 
 seulement changé les droits, pas le contenu.
 Ou alors faut-il sauver les droits pour chaque version ???
 - Hierarchical menu box
 - <<if editable>> <<if connected>>
 - CSS have no history for now. Link css history with page/box history?
 - No right verification on css. Everyone can get them.
 - not possible to change the css for one wikibox for now, just for the whole
 page. Users cannot personnalize the css if they do not have the right to 
 modify the whole page css :-(

Users:
 - encryption of password for the db
 - using PAM or LDAP for authentication
 - All groups are kept in memory. Not good if too much users.

User widgets:
 - clean everything
 - Use a class model closer to wiki and remove Widget.ml?
 - Probably define connection/deconnection actions here and not in 
 session_manager? (cf wiki_widgets).
 - account creation: it is recommended to ask for an email 
(and create an account) only when necessary, for example if the users 
want to perform an action that is not possible without beeing connected. 
Avoid a large registration form to fill before beeing able to do anything ...

Session manager:
 - clean everything
 - what is it? How does it work? Can we modularize?
 - probably use a functor instead of the class?
 - how to make is extensible? Do we want that?

Problems due to Postgresql:
 - Errors are just strings => only one exception
 - very difficult to abstract types (like Users.group)
 because the db returns int32

Wikisyntax:
 - extensible?
 - AST interpreter must be configurable (for ex if we want to forbid images in
 forum messages, or some kind of boxes (wikibox in forum message...))

Forum:
 - clean everything
 - type role is in forum_sql.ml whereas in wiki.ml
 Can we put it in forum.ml
 - Use a class and service model closer to wiki and remove Widget.ml?
 For example use actions for sending messages?
 (Do not forget to transmit session_data!)
 - Use Widget.widget_with_error_box

Ocsimore_lib:
 - De quoi on se sert ?
 - interface

Ocamlduce:
 - I am worried about the efficiency of sequence concatenation in ocamlduce
 for example in the creole parser ... They seem to be pairs so it must be ok, 
 but ... (pairs of what?)
 For example in creole_parser.mly there is several times:
 {{ map {: s :} with i -> i }}. Is it ok?

Creole:
 - How to write a <<span>> extension? (inline)
